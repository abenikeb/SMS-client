import React from "react";
import Joi, { log } from "joi-browser";
import { toast } from "react-toastify";
import { connect } from "react-redux";

import * as actionTypes from "../../../store/action/index";
import Form from "../../../components/Form/Form";
import { saveCustomer } from "../../../services/customerServices";

import WithRouter from "../../../hoc/WithRouter/WithRouter";
import Auxiliary from "../../../hoc/Auxiliary/Auxiliary";
import Spinner from "../../../components/UI/Spinner/Spinner";
import "./Profile.css";

class Customer extends Form {
  schema = {
    id: Joi.string(),
    first_name: Joi.string().required().label("Full Name"),
    last_name: Joi.string().required().label("Last Name"),

    category_id: Joi.required().label("Category"),
    business_licenses_no: Joi.string()
      .required()
      .label("Business Licensses No"),
    plate_no: Joi.string().required().label("Plate no"),

    type_id: Joi.required().label("Type Id"),
    tel: Joi.string().required().label("Tel No"),
    city: Joi.string().required().label("City"),

    email: Joi.string().required().label("Email"),
    territory: Joi.string().required().label("Territory"),
  };

  populateCustomer = async () => {
    try {
      let customerId = this.props.params.id;
      if (customerId === "new") return;

      this.props.onFetchCustomer(customerId);

      // this.setState({ data: this.props.customer });
    } catch (ex) {
      if (ex.response && ex.response.status === 404) {
        toast.error(ex.response.data.error);
        this.props.navigate("/not-found");
      }
    }
  };

  populateCategories = async () => {
    try {
      this.props.onInitCategories();
    } catch (ex) {
      if (ex.response && ex.response.status === 400) {
        toast.error(ex.response.data.error);
        this.props.navigate("/");
      }
    }
  };

  populateCustomerType = async () => {
    try {
      this.props.onInitPaymentType();
    } catch (ex) {
      if (ex.response && ex.response.status === 400) {
        toast.error(ex.response.data.error);
        this.props.navigate("/");
      }
    }
  };

  async componentDidMount() {
    await this.populateCategories();
    await this.populateCustomer();
    await this.populateCustomerType();
  }

  componentDidUpdate(prevProps, prevState) {
    if (prevProps.errors !== this.props.errors) {
      if (this.props.errors !== null) {
        toast.error(this.props.errors);
      }
    }
  }

  componentWillMount() {
    if (this.props.error === null && this.props.errors === null) {
      toast("Successfuly Saved");
      this.props.navigate("/customers");
    }
  }

  // mapPropsToState = (customer) => {
  //   return {
  //     id: customer.id,
  //     first_name: customer.first_name,
  //     last_name: customer.last_name,
  //     category_id: customer.category_id,
  //     business_licenses_no: customer.business_licenses_no,
  //     plate_no: customer.plate_no,
  //     type_id: customer.type_id,
  //     tel: customer.tel,
  //     city: customer.city,
  //     email: customer.email,
  //     territory: customer.territory,
  //   };
  // };

  handleBackAction = () => {
    this.props.navigate("/customers");
  };

  doSubmit = async () => {
    // try {
    // } catch (ex) {
    //   if (ex.response && ex.response.status === 400) {
    //     let error = { ...this.state.error };
    //     ex.response.data.map((res) => {
    //       let keyIndex = Object.keys(res.err)[0];
    //       error[res.property] = res.err[keyIndex];
    //     });
    //     this.setState({ error });
    //   } else if (ex.response && ex.response.status === 401) {
    //     toast.info(ex.response.data.message);
    //   } else if (ex.response && ex.response.status === 404) {
    //     toast.error(ex.response.data.message);
    //     this.props.navigate("/not-found");
    //   }
    //   this.setState({ loading: false });
    // }
    this.props.onSubmitForm(this.props.data);
  };

  render() {
    return (
      <Auxiliary>
        <section className="container">
          {this.props.params.id === "new" ? (
            <h1>Add Customer</h1>
          ) : (
            <h1>Edit Customer</h1>
          )}

          {this.props.loading && <Spinner />}
          <form onSubmit={this.handleSubmit}>
            <section className="input-container">
              {this.renderInput("First Name", "first_name")}
              {this.renderInput("Last Name", "last_name")}
              {this.renderSelect(
                "Category",
                "category_id",
                this.props.categories
              )}

              {this.renderInput("Tel", "tel")}
              {this.renderInput("City", "city")}

              {this.renderInput("Email", "email")}
              {this.renderInput("Territory", "territory")}
              {this.renderInput("Business licenses no", "business_licenses_no")}

              {this.renderInput("Plate no", "plate_no")}
              {this.renderSelect("Type id", "type_id", this.props.paymentType)}
            </section>
            <section className="button-container">
              <button className="btn btn-sm" onClick={this.handleBackAction}>
                Discard
              </button>
              {this.renderButton("Submit", "btn-primary-wrap")}
            </section>
          </form>
        </section>
      </Auxiliary>
    );
  }
}

const mapStateToProps = (state) => {
  return {
    customers: state.customers.customers,
    customer: state.customers.customer,
    categories: state.customers.categories,
    paymentType: state.customers.paymentType,
    loading: state.customers.loading,
    data: state.customers.data,
    error: state.customers.error,
    errors: state.customers.errors,
  };
};

const mapDispatchToProps = (dispatch) => {
  return {
    onInitCustomers: () => {
      dispatch(actionTypes.initCustomers());
    },
    onFetchCustomer: (customerId) => {
      dispatch(actionTypes.fetchCustomer(customerId));
    },
    onInitCategories: () => {
      dispatch(actionTypes.initCategories());
    },
    onInitPaymentType: () => {
      dispatch(actionTypes.initPaymentType());
    },
    onHandleInputChange: (data, errors) => {
      dispatch(actionTypes.changeInput(data, errors));
    },
    onHandleSubmitError: (error) => {
      dispatch(actionTypes.changeError(error));
    },
    onSubmitForm: (data) => {
      dispatch(actionTypes.succesSubmitForm(data));
    },
  };
};

export default connect(
  mapStateToProps,
  mapDispatchToProps
)(WithRouter(Customer));
